{"version":3,"sources":["utils/getRandomCoords.js","components/Snake/Snake.jsx","components/Food/Food.jsx","App.js","reportWebVitals.js","index.js","components/Snake/Snake.module.css","components/Food/Food.module.css"],"names":["getRandomCoords","Math","floor","random","Snake","snakeDots","map","dot","idx","style","left","top","className","styles","snakeDot","Food","snakeFood","initialState","direction","food","speed","App","state","onKeyDown","e","keyCode","setState","moveSnake","dots","head","length","push","shift","checkIfOutOfBorders","onGameOver","checlIfCollapsed","snake","pop","forEach","checkIfEat","enlargeSnake","newSnake","unshift","alert","setInterval","this","document","onkeydown","onSwipedLeft","onSwipedRight","onSwipedUp","onSwipedDown","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7826098c.chunk.js","sourcesContent":["export const getRandomCoords = () => {\r\n  const min = 1;\r\n  const max = 98;\r\n\r\n  const x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  const y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n\r\n  return [x, y];\r\n};\r\n","import React from 'react';\r\nimport styles from './Snake.module.css';\r\n\r\nconst Snake = ({ snakeDots }) => {\r\n  return (\r\n    <div>\r\n      {snakeDots.map((dot, idx) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`\r\n        };\r\n        return <div className={styles.snakeDot} key={idx} style={style}></div>;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Snake;\r\n","import React from 'react';\r\nimport styles from './Food.module.css';\r\n\r\nconst Food = ({ dot }) => {\r\n  const style = {\r\n    left: `${dot[0]}%`,\r\n    top: `${dot[1]}%`\r\n  };\r\n  return <div className={styles.snakeFood} style={style}></div>;\r\n};\r\n\r\nexport default Food;\r\n","import React, { Component } from 'react';\r\nimport { getRandomCoords } from './utils/getRandomCoords';\r\nimport { Snake, Food } from './components';\r\nimport Swipeable from 'swipeable-react';\r\nimport ReactSwipeEvents from 'react-swipe-events';\r\n\r\nconst initialState = {\r\n  snakeDots: [\r\n    [0, 0],\r\n    [2, 0]\r\n  ],\r\n  direction: 'RIGHT',\r\n  food: getRandomCoords(),\r\n  speed: 200\r\n};\r\n\r\nexport default class App extends Component {\r\n  state = initialState;\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.checkIfOutOfBorders();\r\n    this.checlIfCollapsed();\r\n    this.checkIfEat();\r\n  }\r\n\r\n  onKeyDown = e => {\r\n    // e = e || window.event\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        this.setState({\r\n          direction: 'UP'\r\n        });\r\n        break;\r\n      case 40:\r\n        this.setState({\r\n          direction: 'DOWN'\r\n        });\r\n        break;\r\n      case 37:\r\n        this.setState({\r\n          direction: 'LEFT'\r\n        });\r\n        break;\r\n      case 39:\r\n        this.setState({\r\n          direction: 'RIGHT'\r\n        });\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.direction) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots\r\n    });\r\n  };\r\n\r\n  checkIfOutOfBorders = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n\r\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\r\n      this.onGameOver();\r\n    }\r\n  };\r\n\r\n  checlIfCollapsed = () => {\r\n    let snake = [...this.state.snakeDots];\r\n    let head = snake[snake.length - 1];\r\n    snake.pop();\r\n\r\n    snake.forEach(dot => {\r\n      if (head[0] === dot[0] && head[1] === dot[1]) {\r\n        this.onGameOver();\r\n      }\r\n    });\r\n  };\r\n\r\n  checkIfEat = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let food = this.state.food;\r\n\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      this.setState({\r\n        food: getRandomCoords()\r\n      });\r\n      this.enlargeSnake();\r\n    }\r\n  };\r\n\r\n  enlargeSnake = () => {\r\n    const newSnake = [...this.state.snakeDots];\r\n    newSnake.unshift([]);\r\n    this.setState({\r\n      snakeDots: newSnake\r\n    });\r\n  };\r\n\r\n  onGameOver = () => {\r\n    alert(`Game over. Snake length is ${this.state.snakeDots.length}`);\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <ReactSwipeEvents\r\n        onSwipedLeft={() => {\r\n          this.setState({\r\n            direction: 'LEFT'\r\n          });\r\n        }}\r\n        onSwipedRight={() => {\r\n          this.setState({\r\n            direction: 'RIGHT'\r\n          });\r\n        }}\r\n        onSwipedUp={() => {\r\n          this.setState({\r\n            direction: 'UP'\r\n          });\r\n        }}\r\n        onSwipedDown={() => {\r\n          this.setState({\r\n            direction: 'DOWN'\r\n          });\r\n        }}>\r\n        <div className='game-area'>\r\n          <Snake snakeDots={this.state.snakeDots} />\r\n          <Food dot={this.state.food} />\r\n        </div>\r\n      </ReactSwipeEvents>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snakeDot\":\"Snake_snakeDot__zvGnR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"snakeFood\":\"Food_snakeFood__1rfPE\"};"],"sourceRoot":""}